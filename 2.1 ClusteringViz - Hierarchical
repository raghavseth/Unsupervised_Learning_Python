##Hierarchical clustering
#the SciPy linkage() function performs hierarchical clustering on an array of samples. 
#Use the linkage() function to obtain a hierarchical clustering of the grain samples, and use dendrogram() to visualize the result.
# Perform the necessary imports
from scipy.cluster.hierarchy import linkage, dendrogram
import matplotlib.pyplot as plt
# Calculate the linkage: mergings
mergings = linkage(samples, method = 'complete')
# Plot the dendrogram, using varieties as labels
dendrogram(mergings,
           labels=varieties,
           leaf_rotation=90,
           leaf_font_size=6,
)
plt.show()

##Hierarchies of stocks
#SciPy hierarchical clustering doesn't fit into a sklearn pipeline, so you'll need to use the normalize() function from 
#sklearn.preprocessing instead of Normalizer.
# Import normalize
from sklearn.preprocessing import normalize
# Normalize the movements: normalized_movements
normalized_movements = normalize(movements)
# Calculate the linkage: mergings
mergings = linkage(normalized_movements, method = 'complete')
# Plot the dendrogram
dendrogram(mergings,
labels = companies,
leaf_rotation = 90,
leaf_font_size = 6)
plt.show()

##NOTE: In complete linkage, the distance between clusters is the distance between the furthest points of the clusters. 
#In single linkage, the distance between clusters is the distance between the closest points of the clusters.

##Extracting the cluster labels
#Use the fcluster() function to extract the cluster labels for this intermediate clustering, 
and compare the labels with the grain varieties using a cross-tabulation.
# Perform the necessary imports
import pandas as pd
from scipy.cluster.hierarchy import fcluster
# Use fcluster to extract labels: labels
labels = fcluster(mergings, 6, criterion='distance')
# Create a DataFrame with labels and varieties as columns: df
df = pd.DataFrame({'labels': labels, 'varieties': varieties})
# Create crosstab: ct
ct = pd.crosstab(df['labels'],df['varieties'])
# Display ct
print(ct)

